"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles/styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ShowMore = function ShowMore(_ref) {
  var _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? 400 : _ref$maxHeight,
      children = _ref.children,
      button = _ref.button,
      className = _ref.className,
      classNameButton = _ref.classNameButton,
      classNameButtonDiv = _ref.classNameButtonDiv,
      style = _ref.style,
      styleButton = _ref.styleButton,
      styleButtonDiv = _ref.styleButtonDiv,
      anchor = _ref.anchor,
      _ref$defaultAnchor = _ref.defaultAnchor,
      defaultAnchor = _ref$defaultAnchor === void 0 ? false : _ref$defaultAnchor,
      _ref$backgroundColor = _ref.backgroundColor,
      backgroundColor = _ref$backgroundColor === void 0 ? '#fff' : _ref$backgroundColor,
      onChange = _ref.onChange;

  var _useState = (0, _react.useState)('hide'),
      _useState2 = _slicedToArray(_useState, 2),
      showMore = _useState2[0],
      setShowMore = _useState2[1];

  var divRef = (0, _react.useRef)(null);
  var buttonDivRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (divRef.current) {
      if (maxHeight > divRef.current.offsetHeight) {
        setShowMore('hide');
      } else {
        setShowMore(true);
      }
    }
  }, []);

  var showToggleHandler = function showToggleHandler() {
    var currentShowMore = !showMore;
    setShowMore(!showMore);

    if (onChange) {
      onChange(!showMore);
    }

    if (currentShowMore) {
      if (anchor) {
        var _document$querySelect;

        (_document$querySelect = document.querySelector(anchor)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.scrollIntoView();
        return;
      }

      if (defaultAnchor) {
        if (divRef.current) {
          if (window.scrollY > divRef.current.offsetTop) {
            var _document$querySelect2;

            (_document$querySelect2 = document.querySelector('#anchor697948554')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.scrollIntoView();
            return;
          }
        }
      }
    }
  };

  var styleDivInside = _objectSpread(_objectSpread(_objectSpread({}, _styles["default"].ShowMore), style), {}, {
    backgroundColor: backgroundColor
  });

  var styleButtonDivInside = _objectSpread(_objectSpread({}, _styles["default"].ButtonDiv), styleButtonDiv);

  var buttonText = 'Show More';
  var height = maxHeight;

  if (!showMore && showMore !== 'hide') {
    buttonText = 'Show Less';
    height = 'none';
    styleDivInside.overflow = 'visible';
    styleButtonDivInside.position = 'relative';
  }

  var buttonInside = _react["default"].createElement("button", {
    className: "".concat(classNameButton ? classNameButton : ''),
    onClick: showToggleHandler,
    style: _objectSpread(_objectSpread({}, _styles["default"].DefaultButton), styleButton)
  }, buttonText);

  if (button) {
    buttonInside = _react["default"].cloneElement(button, _objectSpread(_objectSpread({}, button.props), {}, {
      onClick: showToggleHandler
    }));
  }

  var content = children;

  if (typeof children === 'string') {
    content = _react["default"].createElement("p", null, children);
  }

  return _react["default"].createElement("div", {
    ref: divRef,
    className: className ? className : '',
    style: _objectSpread(_objectSpread({}, styleDivInside), {}, {
      maxHeight: height
    })
  }, _react["default"].createElement("div", {
    id: "anchor697948554",
    style: _styles["default"].Anchor
  }), content, _react["default"].createElement("div", {
    style: _objectSpread(_objectSpread({}, _styles["default"].Shadow), {}, {
      height: buttonDivRef.current ? buttonDivRef.current.offsetHeight : 'auto',
      display: showMore === 'hide' ? 'none' : 'block'
    })
  }), _react["default"].createElement("div", {
    className: "".concat(classNameButtonDiv ? classNameButtonDiv : ''),
    ref: buttonDivRef,
    style: _objectSpread(_objectSpread(_objectSpread({}, _styles["default"].ButtonDiv), styleButtonDivInside), {}, {
      opacity: showMore === 'hide' ? '0' : '1',
      zIndex: showMore === 'hide' ? -1 : 'initial'
    })
  }, buttonInside));
};

var _default = ShowMore;
exports["default"] = _default;