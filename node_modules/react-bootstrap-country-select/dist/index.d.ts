/// <reference types="react" />
import { ReactNode, ChangeEvent } from "react";
interface ICountry {
    id: string;
    name: string;
    flag: string;
    alpha2: string;
    alpha3: string;
    ioc: string;
}
interface CountrySelectProps {
    value: string | ICountry;
    onChange: (countryIdOrCountry: string | ICountry) => void;
    onTextChange: (text: string, changeEvent: ChangeEvent) => void;
    countries?: ICountry[];
    exclusions?: string[];
    additions?: ICountry[];
    valueAs?: "id" | "object";
    flags?: boolean;
    flush?: boolean;
    disabled?: boolean;
    placeholder?: ReactNode;
    noMatchesText?: ReactNode;
    size?: "sm" | "lg";
    sort?: (c1: ICountry, c2: ICountry) => number;
    matchNameFromStart?: boolean;
    matchAbbreviations?: boolean;
    countryLabelFormatter?: (country: ICountry) => ReactNode;
    throwInvalidValueError?: boolean;
    listMaxHeight?: number;
    closeOnSelect?: true;
    formControlProps?: any; // TODO
    overlayProps?: any; // TODO
    classPrefix?: string;
    className?: string;
}
declare const CountrySelect: ({ value, onChange, onTextChange, countries, exclusions, additions, valueAs, flags, flush, disabled, placeholder, noMatchesText, size, sort, 
// e.g. (c1, c2) => c1.name < c2.name ? -1 : (c1.name > c2.name ? 1 : 0),
matchNameFromStart, matchAbbreviations, countryLabelFormatter, throwInvalidValueError, listMaxHeight, closeOnSelect, formControlProps, overlayProps, classPrefix, className }: CountrySelectProps) => JSX.Element;
export { CountrySelect as default };
